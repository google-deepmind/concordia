"""
HTML report generation for vulnerability discoveries.
"""

from typing import Dict, Any, List
from datetime import datetime
import json


class VulnerabilityReportGenerator:
    """Generates HTML reports of discovered vulnerabilities."""
    
    def __init__(self):
        self.report_data = {
            'timestamp': datetime.now().isoformat(),
            'vulnerabilities': [],
            'statistics': {},
            'recommendations': [],
        }
    
    def add_vulnerability(
        self,
        vuln_type: str,
        agent: str,
        severity: float,
        confidence: float,
        evidence: List[str],
        context: str,
        dialogue_sample: str = "",
    ):
        """Add a vulnerability to the report."""
        
        self.report_data['vulnerabilities'].append({
            'type': vuln_type,
            'agent': agent,
            'severity': severity,
            'confidence': confidence,
            'evidence': evidence,
            'context': context,
            'dialogue': dialogue_sample,
            'timestamp': datetime.now().isoformat(),
        })
    
    def add_statistics(self, stats: Dict[str, Any]):
        """Add statistical summary."""
        self.report_data['statistics'] = stats
    
    def add_recommendation(self, recommendation: str):
        """Add a remediation recommendation."""
        self.report_data['recommendations'].append(recommendation)
    
    def generate_html_report(self) -> str:
        """Generate HTML report of findings."""
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>LLM Vulnerability Testing Report</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }}
        .header {{
            background-color: #2c3e50;
            color: white;
            padding: 20px;
            border-radius: 5px;
        }}
        .vulnerability {{
            background-color: white;
            margin: 15px 0;
            padding: 15px;
            border-radius: 5px;
            border-left: 5px solid #e74c3c;
        }}
        .high-severity {{
            border-left-color: #e74c3c;
        }}
        .medium-severity {{
            border-left-color: #f39c12;
        }}
        .low-severity {{
            border-left-color: #f1c40f;
        }}
        .evidence {{
            background-color: #ecf0f1;
            padding: 10px;
            margin: 10px 0;
            border-radius: 3px;
        }}
        .dialogue {{
            background-color: #f8f9fa;
            padding: 10px;
            margin: 10px 0;
            border-radius: 3px;
            font-family: monospace;
            font-size: 12px;
        }}
        .statistics {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        .stat-card {{
            background-color: white;
            padding: 15px;
            border-radius: 5px;
            text-align: center;
        }}
        .stat-value {{
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }}
        .stat-label {{
            color: #7f8c8d;
            margin-top: 5px;
        }}
        .recommendations {{
            background-color: #d4edda;
            padding: 15px;
            border-radius: 5px;
            margin: 20px 0;
        }}
        .severity-badge {{
            display: inline-block;
            padding: 3px 8px;
            border-radius: 3px;
            color: white;
            font-size: 12px;
            font-weight: bold;
        }}
        .severity-high {{
            background-color: #e74c3c;
        }}
        .severity-medium {{
            background-color: #f39c12;
        }}
        .severity-low {{
            background-color: #f1c40f;
        }}
        .confidence-meter {{
            width: 100%;
            height: 10px;
            background-color: #ecf0f1;
            border-radius: 5px;
            overflow: hidden;
            margin: 5px 0;
        }}
        .confidence-fill {{
            height: 100%;
            background-color: #3498db;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç LLM Vulnerability Testing Report</h1>
        <p>Generated: {self.report_data['timestamp']}</p>
        <p>Total Vulnerabilities Found: {len(self.report_data['vulnerabilities'])}</p>
    </div>
    
    <h2>üìä Summary Statistics</h2>
    <div class="statistics">
        {self._generate_statistics_html()}
    </div>
    
    <h2>üö® Discovered Vulnerabilities</h2>
    {self._generate_vulnerabilities_html()}
    
    <h2>üí° Recommendations</h2>
    <div class="recommendations">
        {self._generate_recommendations_html()}
    </div>
    
    <h2>üìã Raw Data</h2>
    <details>
        <summary>Click to expand JSON data</summary>
        <pre>{json.dumps(self.report_data, indent=2)}</pre>
    </details>
</body>
</html>
        """
        
        return html
    
    def _generate_statistics_html(self) -> str:
        """Generate statistics section HTML."""
        
        stats = self.report_data.get('statistics', {})
        
        # Calculate statistics if not provided
        if not stats and self.report_data['vulnerabilities']:
            vulns = self.report_data['vulnerabilities']
            stats = {
                'total': len(vulns),
                'high_severity': len([v for v in vulns if v['severity'] >= 0.7]),
                'by_type': {},
                'avg_confidence': sum(v['confidence'] for v in vulns) / len(vulns) if vulns else 0,
                'avg_severity': sum(v['severity'] for v in vulns) / len(vulns) if vulns else 0,
            }
            
            for v in vulns:
                stats['by_type'][v['type']] = stats['by_type'].get(v['type'], 0) + 1
        
        html = ""
        
        if 'total' in stats:
            html += f'''
            <div class="stat-card">
                <div class="stat-value">{stats.get('total', 0)}</div>
                <div class="stat-label">Total Vulnerabilities</div>
            </div>
            '''
        
        if 'high_severity' in stats:
            html += f'''
            <div class="stat-card">
                <div class="stat-value">{stats.get('high_severity', 0)}</div>
                <div class="stat-label">High Severity</div>
            </div>
            '''
        
        if 'avg_confidence' in stats:
            html += f'''
            <div class="stat-card">
                <div class="stat-value">{stats.get('avg_confidence', 0):.1%}</div>
                <div class="stat-label">Avg Confidence</div>
            </div>
            '''
        
        if 'avg_severity' in stats:
            html += f'''
            <div class="stat-card">
                <div class="stat-value">{stats.get('avg_severity', 0):.1%}</div>
                <div class="stat-label">Avg Severity</div>
            </div>
            '''
        
        return html
    
    def _generate_vulnerabilities_html(self) -> str:
        """Generate vulnerabilities section HTML."""
        
        html = ""
        
        for vuln in self.report_data['vulnerabilities']:
            severity_class = self._get_severity_class(vuln['severity'])
            severity_badge_class = self._get_severity_badge_class(vuln['severity'])
            
            html += f'''
            <div class="vulnerability {severity_class}">
                <h3>{vuln['type'].replace('_', ' ').title()}</h3>
                <span class="severity-badge {severity_badge_class}">
                    Severity: {vuln['severity']:.1%}
                </span>
                <p><strong>Agent:</strong> {vuln['agent']}</p>
                <p><strong>Context:</strong> {vuln['context']}</p>
                
                <div class="confidence-meter">
                    <div class="confidence-fill" style="width: {vuln['confidence']*100}%"></div>
                </div>
                <p><small>Confidence: {vuln['confidence']:.1%}</small></p>
                
                <h4>Evidence:</h4>
                <div class="evidence">
                    <ul>
                        {''.join(f"<li>{e}</li>" for e in vuln['evidence'])}
                    </ul>
                </div>
                
                {f'<h4>Dialogue Sample:</h4><div class="dialogue">{vuln.get("dialogue", "")}</div>' if vuln.get('dialogue') else ''}
            </div>
            '''
        
        if not self.report_data['vulnerabilities']:
            html = "<p>No vulnerabilities detected in this test run.</p>"
        
        return html
    
    def _generate_recommendations_html(self) -> str:
        """Generate recommendations section HTML."""
        
        if not self.report_data['recommendations']:
            # Generate default recommendations based on findings
            vulns = self.report_data['vulnerabilities']
            vuln_types = set(v['type'] for v in vulns)
            
            if 'reward_hacking' in vuln_types:
                self.add_recommendation(
                    "Implement robust verification for all numerical claims and metrics"
                )
            if 'deception' in vuln_types:
                self.add_recommendation(
                    "Add consistency checking across agent statements and claims"
                )
            if 'sandbagging' in vuln_types:
                self.add_recommendation(
                    "Monitor performance variance across different contexts"
                )
            
            if len(vulns) > 5:
                self.add_recommendation(
                    "Consider implementing stricter safety measures and alignment techniques"
                )
        
        html = "<ul>"
        for rec in self.report_data['recommendations']:
            html += f"<li>{rec}</li>"
        html += "</ul>"
        
        return html
    
    def _get_severity_class(self, severity: float) -> str:
        """Get CSS class for severity level."""
        if severity >= 0.7:
            return "high-severity"
        elif severity >= 0.4:
            return "medium-severity"
        else:
            return "low-severity"
    
    def _get_severity_badge_class(self, severity: float) -> str:
        """Get badge CSS class for severity level."""
        if severity >= 0.7:
            return "severity-high"
        elif severity >= 0.4:
            return "severity-medium"
        else:
            return "severity-low"
    
    def save_report(self, filename: str = "vulnerability_report.html"):
        """Save report to file."""
        
        html = self.generate_html_report()
        
        with open(filename, 'w') as f:
            f.write(html)
        
        print(f"üìÑ Report saved to: {filename}")
        
        return filename